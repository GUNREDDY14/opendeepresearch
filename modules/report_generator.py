"""
Module 4: Report Generator
Generates professional research reports from research data
"""

import json
import os
from datetime import datetime
from typing import Dict, List, Any
from modules.llm_client import create_llm_client

class ReportGenerator:
    """
    Generates professional research reports in Jupyter notebook format
    """
    
    def __init__(self, llm_client=None):
        self.llm_client = llm_client or create_llm_client()
        self.citation_counter = 1
        self.citations_used = {}
    
    def generate_report(self, research_plan: Dict[str, Any], research_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Generate complete research report from plan and data
        
        Args:
            research_plan: Plan from Module 2
            research_data: Research data from Module 3
            
        Returns:
            Complete Jupyter notebook structure
        """
        
        print("📄 Report Generator")
        print("=" * 50)
        print(f"Generating report: {research_plan.get('title', 'Unknown')}")
        print()
        
        # Initialize report structure
        report = {
            "metadata": {
                "generated_at": datetime.now().isoformat(),
                "title": research_plan.get('title', ''),
                "total_sections": len(research_plan.get('main_sections', [])),
                "total_sources": research_data.get('summary', {}).get('total_sources', 0)
            },
            "cells": []
        }
        
        # Step 1: Generate title and metadata
        self._add_title_cell(report, research_plan)
        
        # Step 2: Generate abstract
        self._add_abstract_cell(report, research_plan, research_data)
        
        # Step 3: Generate introduction
        self._add_introduction_cell(report, research_plan, research_data)
        
        # Step 4: Generate main sections
        self._add_main_sections(report, research_plan, research_data)
        
        # Step 5: Generate conclusion
        self._add_conclusion_cell(report, research_plan, research_data)
        
        # Step 6: Generate citations
        self._add_citations_cell(report)
        
        # Step 7: Convert to Jupyter format
        notebook = self._create_jupyter_notebook(report)
        
        # Step 8: Save notebook
        self._save_notebook(notebook, research_plan.get('title', 'Research Report'))
        
        print("✅ Report generation completed successfully!")
        return notebook
    
    def _add_title_cell(self, report: Dict[str, Any], research_plan: Dict[str, Any]):
        """Add title and metadata cell"""
        
        title = research_plan.get('title', 'Research Report')
        date_str = datetime.now().strftime("%B %d, %Y")
        
        title_content = f"""# {title}

*Generated by Open Deep Researcher*

**Date:** {date_str}  
**Target Audience:** {research_plan.get('metadata', {}).get('target_audience', 'General audience')}  
**Research Depth:** {research_plan.get('metadata', {}).get('depth_level', 'Intermediate')}

---
"""
        
        report['cells'].append({
            "type": "markdown",
            "content": title_content
        })
        
        print("✅ Title section added")
    
    def _add_abstract_cell(self, report: Dict[str, Any], research_plan: Dict[str, Any], research_data: Dict[str, Any]):
        """Generate and add abstract"""
        
        print("📝 Generating abstract...")
        
        # Collect key insights from research data
        key_insights = []
        for section_name, section_data in research_data.get('sections_data', {}).items():
            processed = section_data.get('processed_content', [])[:2]  # Top 2 insights per section
            for content in processed:
                insights = content.get('key_insights', '')
                if insights and len(insights) > 50:
                    key_insights.append(insights[:200] + "...")
        
        abstract_prompt = f"""
        Research Title: {research_plan.get('title', '')}
        Research Questions: {research_plan.get('research_questions', [])}
        Key Research Insights: {key_insights[:5]}  # Limit to 5 insights
        
        Write a comprehensive abstract for this research report. The abstract should:
        1. Introduce the research topic and its importance
        2. State the main research questions or objectives
        3. Briefly describe the methodology used
        4. Summarize key findings and insights
        5. State the conclusions and implications
        
        Target length: 150-200 words
        Write in academic style appropriate for the target audience.
        """
        
        abstract_response = self.llm_client.generate(
            abstract_prompt,
            task_type="writing",
            max_tokens=400,
            temperature=0.3
        )
        
        if abstract_response and not abstract_response.startswith("Error:"):
            abstract_content = f"""## Abstract

{abstract_response.strip()}

---
"""
        else:
            # Fallback abstract
            abstract_content = f"""## Abstract

This research provides a comprehensive analysis of {research_plan.get('title', 'the specified topic')}. Through systematic investigation of multiple sources and expert analysis, this report examines key concepts, current developments, and practical applications. The findings contribute to our understanding of the field and identify areas for future research and development.

---
"""
        
        report['cells'].append({
            "type": "markdown",
            "content": abstract_content
        })
        
        print("✅ Abstract generated")
    
    def _add_introduction_cell(self, report: Dict[str, Any], research_plan: Dict[str, Any], research_data: Dict[str, Any]):
        """Generate and add introduction"""
        
        print("📝 Generating introduction...")
        
        intro_prompt = f"""
        Research Title: {research_plan.get('title', '')}
        Research Questions: {research_plan.get('research_questions', [])}
        Main Sections: {[section.get('title', '') for section in research_plan.get('main_sections', [])]}
        
        Write a compelling introduction for this research report. The introduction should:
        1. Hook the reader with the importance of the topic
        2. Provide necessary background context
        3. Clearly state the research objectives
        4. Outline the structure of the report
        5. Explain the contribution this research makes
        
        Target length: 300-400 words
        Write in an engaging but academic style.
        """
        
        intro_response = self.llm_client.generate(
            intro_prompt,
            task_type="writing",
            max_tokens=600,
            temperature=0.4
        )
        
        if intro_response and not intro_response.startswith("Error:"):
            intro_content = f"""## Introduction

{intro_response.strip()}
"""
        else:
            # Fallback introduction
            intro_content = f"""## Introduction

{research_plan.get('title', 'This research topic')} represents a critical area of investigation in today's rapidly evolving technological landscape. Understanding the fundamental principles, current applications, and future potential of this field is essential for researchers, practitioners, and stakeholders.

This comprehensive analysis examines {research_plan.get('title', 'the topic')} through multiple lenses, providing both foundational knowledge and cutting-edge insights. Our investigation addresses key research questions while maintaining rigorous academic standards and practical relevance.

The report is structured to provide a logical progression from basic concepts to advanced applications, ensuring accessibility for our target audience while maintaining technical depth and accuracy.
"""
        
        report['cells'].append({
            "type": "markdown",
            "content": intro_content
        })
        
        print("✅ Introduction generated")
    
    def _add_main_sections(self, report: Dict[str, Any], research_plan: Dict[str, Any], research_data: Dict[str, Any]):
        """Generate all main sections with content and citations"""
        
        main_sections = research_plan.get('main_sections', [])
        
        for i, section in enumerate(main_sections, 1):
            section_title = section.get('title', f'Section {i}')
            print(f"📝 Generating section {i}: {section_title}")
            
            # Get research data for this section
            section_data = research_data.get('sections_data', {}).get(section_title, {})
            processed_content = section_data.get('processed_content', [])
            
            # Generate section content
            section_content = self._generate_section_content(section, processed_content)
            
            report['cells'].append({
                "type": "markdown",
                "content": section_content
            })
            
            print(f"✅ Section {i} generated")
    
    def _generate_section_content(self, section: Dict[str, Any], processed_content: List[Dict[str, Any]]) -> str:
        """Generate content for a single section"""
        
        section_title = section.get('title', 'Unknown Section')
        section_objective = section.get('objective', '')
        
        # Collect insights from processed content
        insights_text = ""
        citation_text = ""
        
        for i, content in enumerate(processed_content[:5], 1):  # Max 5 sources per section
            source_title = content.get('source_title', 'Unknown Source')
            key_insights = content.get('key_insights', '')
            source_url = content.get('source_url', '')
            
            if key_insights:
                insights_text += f"\n{key_insights}\n"
                
                # Add citation
                citation_ref = self._add_citation(source_title, source_url)
                citation_text += f" [{citation_ref}]"
        
        # Generate section using LLM
        section_prompt = f"""
        Section Title: {section_title}
        Section Objective: {section_objective}
        Research Insights: {insights_text}
        
        Write a comprehensive section for this research report. The section should:
        1. Start with a clear introduction to the topic
        2. Present the key findings and insights coherently
        3. Analyze and synthesize the information
        4. Connect ideas logically
        5. Maintain academic rigor and clarity
        
        Target length: 400-600 words
        Use the research insights provided but write original analysis and connections.
        """
        
        section_response = self.llm_client.generate(
            section_prompt,
            task_type="writing",
            max_tokens=800,
            temperature=0.3
        )
        
        if section_response and not section_response.startswith("Error:"):
            section_text = section_response.strip()
        else:
            # Fallback section content
            section_text = f"""This section examines {section_title.lower()} in detail. {section_objective}

Based on our research analysis, several key findings emerge from the available literature and expert sources. The evidence suggests important developments and considerations that warrant careful examination.

{insights_text if insights_text else "Further research in this area continues to reveal important insights and practical applications."}

These findings contribute to our overall understanding and provide a foundation for the analysis that follows."""
        
        # Add citations to the end of the section
        if citation_text:
            section_text += f"\n\n*Sources: {citation_text}*"
        
        return f"""## {section_title}

{section_text}

---
"""
    
    def _add_conclusion_cell(self, report: Dict[str, Any], research_plan: Dict[str, Any], research_data: Dict[str, Any]):
        """Generate and add conclusion"""
        
        print("📝 Generating conclusion...")
        
        # Collect key findings from all sections
        all_insights = []
        for section_data in research_data.get('sections_data', {}).values():
            processed = section_data.get('processed_content', [])
            for content in processed[:2]:  # Top 2 per section
                insights = content.get('key_insights', '')
                if insights:
                    all_insights.append(insights[:150] + "...")
        
        conclusion_prompt = f"""
        Research Title: {research_plan.get('title', '')}
        Research Questions: {research_plan.get('research_questions', [])}
        Key Findings Summary: {all_insights[:8]}  # Limit to 8 findings
        
        Write a comprehensive conclusion for this research report. The conclusion should:
        1. Summarize the main findings and insights
        2. Address the original research questions
        3. Discuss the implications of the findings
        4. Identify limitations of the current research
        5. Suggest areas for future research
        6. End with a strong final statement about the significance
        
        Target length: 300-400 words
        Write with authority and clarity.
        """
        
        conclusion_response = self.llm_client.generate(
            conclusion_prompt,
            task_type="writing",
            max_tokens=600,
            temperature=0.3
        )
        
        if conclusion_response and not conclusion_response.startswith("Error:"):
            conclusion_content = f"""## Conclusion

{conclusion_response.strip()}

---
"""
        else:
            # Fallback conclusion
            conclusion_content = f"""## Conclusion

This comprehensive analysis of {research_plan.get('title', 'the research topic')} has revealed important insights across multiple dimensions. The research has addressed the key questions posed at the outset while uncovering additional areas of interest and concern.

The findings demonstrate the complexity and evolving nature of this field, highlighting both opportunities and challenges. The evidence suggests that continued research and development in this area will yield significant benefits for both theoretical understanding and practical applications.

Future research should focus on addressing the limitations identified in this study while exploring the promising directions that have emerged from our analysis. The significance of this work extends beyond immediate applications to inform broader discussions about the field's trajectory and potential impact.

---
"""
        
        report['cells'].append({
            "type": "markdown",
            "content": conclusion_content
        })
        
        print("✅ Conclusion generated")
    
    def _add_citation(self, title: str, url: str) -> int:
        """Add citation and return reference number"""
        
        if title not in self.citations_used:
            self.citations_used[title] = {
                "number": self.citation_counter,
                "title": title,
                "url": url,
                "accessed": datetime.now().strftime("%Y-%m-%d")
            }
            self.citation_counter += 1
        
        return self.citations_used[title]["number"]
    
    def _add_citations_cell(self, report: Dict[str, Any]):
        """Add references/citations section"""
        
        if not self.citations_used:
            return
        
        print("📚 Generating citations...")
        
        citations_content = "## References\n\n"
        
        # Sort citations by number
        sorted_citations = sorted(self.citations_used.values(), key=lambda x: x["number"])
        
        for citation in sorted_citations:
            citations_content += f"[{citation['number']}] {citation['title']}"
            if citation['url']:
                citations_content += f". Retrieved from {citation['url']}"
            citations_content += f" (accessed {citation['accessed']})\n\n"
        
        report['cells'].append({
            "type": "markdown",
            "content": citations_content
        })
        
        print(f"✅ {len(self.citations_used)} citations added")
    
    def _create_jupyter_notebook(self, report: Dict[str, Any]) -> Dict[str, Any]:
        """Convert report to Jupyter notebook format"""
        
        print("📓 Creating Jupyter notebook...")
        
        cells = []
        
        for cell in report['cells']:
            cells.append({
                "cell_type": "markdown",
                "metadata": {},
                "source": [cell['content']]
            })
        
        notebook = {
            "cells": cells,
            "metadata": {
                "kernelspec": {
                    "display_name": "Python 3",
                    "language": "python",
                    "name": "python3"
                },
                "language_info": {
                    "name": "python",
                    "version": "3.11.0"
                },
                "odr_metadata": {
                    "generated_by": "Open Deep Researcher",
                    "generation_date": datetime.now().isoformat(),
                    "total_sections": len([c for c in report['cells'] if c['content'].startswith('## ') and not c['content'].startswith('## Abstract')]),
                    "total_citations": len(self.citations_used)
                }
            },
            "nbformat": 4,
            "nbformat_minor": 4
        }
        
        print("✅ Jupyter notebook created")
        return notebook
    
    def _save_notebook(self, notebook: Dict[str, Any], title: str):
        """Save notebook to file"""
        
        # Create safe filename
        safe_title = "".join(c for c in title if c.isalnum() or c in (' ', '-', '_')).rstrip()
        safe_title = safe_title.replace(' ', '_')
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"research_report_{safe_title}_{timestamp}.ipynb"
        filepath = f"outputs/{filename}"
        
        # Ensure outputs directory exists
        os.makedirs("outputs", exist_ok=True)
        
        with open(filepath, 'w') as f:
            json.dump(notebook, f, indent=2)
        
        print(f"📁 Report saved to: {filepath}")
        return filepath


# Convenience function
def generate_report(research_plan: Dict[str, Any], research_data: Dict[str, Any]) -> Dict[str, Any]:
    """Generate complete research report"""
    generator = ReportGenerator()
    return generator.generate_report(research_plan, research_data)
